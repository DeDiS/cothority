package debug_lvl
import (
	"fmt"
	"bytes"
	"github.com/Sirupsen/logrus"
	"os"
	"runtime"
	"regexp"
)

// These are information-debugging levels that can be turned on or off.
// Every logging greater than 'DebugVisible' will be discarded. So you can
// Log at different levels and easily turn on or off the amount of logging
// generated by adjusting the 'DebugVisible' variable.
var DebugVisible = 1

// The padding of functions to make a nice debug-output - this is automatically updated
// whenever there are longer functions and kept at that new maximum. If you prefer
// to have a fixed output and don't remember oversized names, put a negative value
// in here
var NamePadding = 40

// Padding of line-numbers for a nice debug-output - used in the same way as
// NamePadding
var LinePadding = 3

// Testing output has to be on fmt, it doesn't take into account log-outputs
// So for testing, set Testing = true, and instead of sending to log, it will
// output to fmt
var Testing = false

// If this variable is set, it will be outputted between the position and the message
var StaticMsg = ""

// Holds the logrus-structure to do our logging
var DebugLog = &logrus.Logger{
	Out: os.Stdout,
	Formatter: &DebugLvl{},
	Hooks: make(logrus.LevelHooks),
	Level: logrus.InfoLevel}

var regexpPaths, _ = regexp.Compile(".*/")

func init(){
}

func Lvl(lvl int, args ...interface{}) {
	pc, _, line, _ := runtime.Caller(2)
	name := regexpPaths.ReplaceAllString(runtime.FuncForPC(pc).Name(), "")
	lineStr := fmt.Sprintf("%d", line)

	// For the testing-framework, we check the resulting string. So as not to
	// have the tests fail every time somebody moves the functions, we put
	// the line-# to 0
	if Testing {
		line = 0
	}

	if len(name) > NamePadding && NamePadding > 0{
		NamePadding = len(name)
	}
	if len(lineStr) > LinePadding && LinePadding > 0{
		LinePadding = len(name)
	}
	fmtstr := fmt.Sprintf("%%%ds: %%%dd", NamePadding, LinePadding)
	caller := fmt.Sprintf(fmtstr, name, line)
	if StaticMsg != ""{
		caller += "@" + StaticMsg
	}
	DebugLog.WithFields(logrus.Fields{
		"debug_lvl": lvl,
		"caller": caller}).Println(args...)
}

func Lvl1(args ...interface{}) {
	Lvl(1, args...)
}

func Lvl2(args ...interface{}) {
	Lvl(2, args...)
}

func Lvl3(args ...interface{}) {
	Lvl(3, args...)
}

func Lvl4(args ...interface{}) {
	Lvl(4, args...)
}

func Lvl5(args ...interface{}) {
	Lvl(5, args...)
}

type DebugLvl struct {
}

func (f *DebugLvl) Format(entry *logrus.Entry) ([]byte, error) {
	lvl := entry.Data["debug_lvl"].(int)
	caller := entry.Data["caller"].(string)
	if lvl <= DebugVisible {
		b := &bytes.Buffer{}
		b.WriteString(fmt.Sprintf("%d: (%s) - %s", lvl, caller, entry.Message))
		b.WriteByte('\n')

		if Testing {
			fmt.Print(b)
			return nil, nil
		} else {
			return b.Bytes(), nil
		}
	} else {
		return nil, nil
	}
}

