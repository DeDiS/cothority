syntax = "proto2";

// LookupSciper takes a sciper number and returns elements of the user.
message LookupSciper {
  required string sciper = 1;
  // 	 If LookupURL is set, use it instead of the default (for testing).
  required string lookupurl = 2;
}

// LookupSciperReply returns the elements of the vcard from
// https://people.epfl.ch/cgi-bin/people/vCard?id=sciper
message LookupSciperReply {
  required string fullname = 1;
  required string email = 2;
  required string url = 3;
  required string title = 4;
}

// Link message.
message Link {
  required string pin = 1;
  // 	 Pin of the running service.
  optional Roster roster = 2;
  // 	 Roster that handles elections.
  required bytes key = 3;
  // 	 Key is a front-end public key.
  repeated uint32 admins = 4;
  // 	 Admins is a list of election administrators.
  optional bytes id = 5;
  // 	 ID of the master skipchain to update; optional.
  optional uint32 user = 6;
  // 	 User identifier; optional (required with ID).
  optional bytes signature = 7;
  // 	 Signature authenticating the message; optional (required with ID).
}

// LinkReply message.
message LinkReply {
  required bytes id = 1;
  // 	 ID of the master skipchain.
}

// Open message.
message Open {
  required bytes id = 1;
  // 	 ID of the master skipchain.
  optional Election election = 2;
  // 	 Election object.
  required   = 3;
  required uint32 user = 4;
  // 	 User identifier.
  required bytes signature = 5;
  // 	 Signature authenticating the message.
}

// OpenReply message.
message OpenReply {
  required bytes id = 1;
  // 	 ID of the election skipchain.
  required bytes key = 2;
  // 	 Key assigned by the DKG.
}

// Cast message.
message Cast {
  required bytes id = 1;
  // 	 ID of the election skipchain.
  optional Ballot ballot = 2;
  // 	 Ballot to be casted.
  required   = 3;
  required uint32 user = 4;
  // 	 User identifier.
  required bytes signature = 5;
  // 	 Signature authenticating the message.
}

// CastReply message.
message CastReply {
  required bytes id = 1;
  // 	 Hash of the block storing the transaction
}

// Shuffle message.
message Shuffle {
  required bytes id = 1;
  // 	 ID of the election skipchain.
  required   = 2;
  required uint32 user = 3;
  // 	 User identifier.
  required bytes signature = 4;
  // 	 Signature authenticating the message.
}

// ShuffleReply message.
message ShuffleReply {
  required   = 1;
  //  Decrypt message.
  required Decrypt type = 2;
  required bytes id = 3;
  // 	 ID of the election skipchain.
  required   = 4;
  required uint32 user = 5;
  // 	 User identifier.
  required bytes signature = 6;
  // 	 Signature authenticating the message.
}

// DecryptReply message.
message DecryptReply {
  required   = 1;
  //  GetElections message.
  required GetElections type = 2;
  required uint32 user = 3;
  // 	 User identifier.
  required bytes master = 4;
  // 	 Master skipchain ID.
  required ElectionState stage = 5;
  // 	 Election Stage filter. 0 for all elections.
  required bytes signature = 6;
  // 	 Signature authenticating the message.
  required bool checkvoted = 7;
  // 	 Check if user has voted in the elections.
}

// GetElectionsReply message.
message GetElectionsReply {
  repeated Election elections = 1;
  // 	 Elections is the retrieved list of elections.
  required bool isadmin = 2;
  // 	 Is the user in the list of admins in the master?
  required Master master = 3;
}

// GetBox message.
message GetBox {
  required bytes id = 1;
  // 	 ID of the election skipchain.
}

// GetBoxReply message.
message GetBoxReply {
  optional Box box = 1;
  // 	 Box of encrypted ballots.
}

// GetMixes message.
message GetMixes {
  required bytes id = 1;
  // 	 ID of the election skipchain.
}

// GetMixesReply message.
message GetMixesReply {
  repeated Mix mixes = 1;
  // 	 Mixes from all conodes.
}

// GetPartials message.
message GetPartials {
  required bytes id = 1;
  // 	 ID of the election skipchain.
}

// GetPartialsReply message.
message GetPartialsReply {
  repeated Partial partials = 1;
  // 	 Partials from all conodes.
}

// Reconstruct message.
message Reconstruct {
  required bytes id = 1;
  // 	 ID of the election skipchain.
}

// ReconstructReply message.
message ReconstructReply {
  repeated bytes points = 1;
  // 	 Points are the decrypted plaintexts.
}

// Ping message.
message Ping {
  required uint32 nonce = 1;
  // 	 Nonce can be any integer.
}


